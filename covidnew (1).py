# -*- coding: utf-8 -*-
"""covidnew.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Cnd5LJD-ZDZbZd3nrvCDj87RsZYNPwV

**TASK:**

COVID-19 Impact Analysis using Google Colab and Plotly: Use global COVID-19 data to examine trends in **confirmed cases, recoveries, and deaths across countries over time**. Create interactive visualizations and **compare regional responses**.
 Dataset : https://covid.ourworldindata.org/data/owid-covid-data.csv

**Data Analysis:**
1. Loading and Understanding the data
2. Analysing Confirmed Cases over World
3. Analysing Total Deaths over World
4. Analysing Trends Over World
5. Mapping World Covid Data
6. Regional Comparison for Continent or Countries
7. Vaccination Analysis
8. Evaluating Covid Recoveries
9. Case Fatality Rate
10. Additional Features (Case growth rate , vaccination rate)

1. Loading and Understanding Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data=" https://covid.ourworldindata.org/data/owid-covid-data.csv"
df = pd.read_csv(data)
df.head()

df.shape

df.info()

df.describe()

df.isnull().sum()

NAN = df.isna().mean().multiply(100).reset_index()
NAN.columns = ['Column_name', 'percentage']
NAN

Loc=df['location'].unique()
print(Loc)
print("\n Total countries in the dataset: ",len(Loc))

df.tail()

"""Last updated date Information (2024-08-14)"""

df.drop (df[df.location == 'World'].index , inplace = True)
#max gives the latest date
df_recent = df[df['date'] ==max(df['date'])].reset_index()
df_recent.head()

df_recent.tail()

"""2. Analysing Confirmed Cases Daywise"""

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

df_over_days = df.groupby(['date'])[['total_cases','new_cases','total_deaths','new_deaths']].sum().reset_index().sort_values("date",ascending=True).reset_index(drop=True)
df_over_days.head(10)

df_over_days.tail(10)

fig = go.Figure(go.Scatter(
    x=df_over_days['date'],
    y=df_over_days['total_cases'],
    fill='tozeroy',
    mode='none',
    fillcolor='rgba(255,140,0,0.5)'
))
fig.update_layout(
    title='Confirmed Cases Daywise ',
    template='plotly_dark',
    yaxis_title='Confirmed Cases',
    xaxis_title='Days'
)
fig.show()

"""Confirmed Cases YearWise"""

# Ensure 'date' is in datetime format
df['date'] = pd.to_datetime(df['date'])

# Extract year from the date
df['year'] = df['date'].dt.year

df_over_year = df.groupby('year')[['total_cases', 'new_cases', 'total_deaths', 'new_deaths']].max().reset_index().sort_values("year").reset_index(drop=True)
df_over_year.head()

fig = go.Figure(go.Pie(
    labels=df_over_year['year'],
    values=df_over_year['total_cases'],
    marker=dict(colors=px.colors.sequential.Oranges),
    hole=0.3
))
fig.update_layout(
    title='Confirmed Cases YearWise ',
    template='plotly_white'
)
fig.show()

"""3. Analysing Total Deaths Daywise"""

fig = go.Figure(go.Scatter(
    x=df_over_days['date'],
    y=df_over_days['total_deaths'],
    fill='tozeroy',
    mode='none',
    fillcolor='rgba(255,140,0,0.5)'
))
fig.update_layout(
    title='Total Deaths Daywise ',
    template='plotly_dark',
    yaxis_title='Total Deaths',
    xaxis_title='Days'
)
fig.show()

fig = go.Figure(go.Pie(
    labels=df_over_year['year'],
    values=df_over_year['total_deaths'],
    marker=dict(colors=px.colors.sequential.Oranges),
    hole=0.3
))
fig.update_layout(
    title='Total Deaths YearWise ',
    template='plotly_white'
)
fig.show()

"""Analysing New Cases and New Deaths"""

fig = go.Figure(go.Scatter(
    x=df_over_days['date'],
    y=df_over_days['new_cases'],
    mode='lines',
    line=dict(color='white')
))
fig.update_layout(
    title='New Cases Daily ',
    template='plotly_dark',
    yaxis_title='New Cases',
    xaxis_title='Days'
)
fig.show()

fig = go.Figure(go.Scatter(
    x=df_over_days['date'],
    y=df_over_days['new_deaths'],
    mode='lines',
    line=dict(color='white')
))
fig.update_layout(
    title='New Deaths Daily ',
    template='plotly_dark',
    yaxis_title='New Deaths',
    xaxis_title='Days'
)
fig.show()

"""4. Analysing trends over Country"""

df_country = df.groupby(["location"])[["new_cases","new_deaths"]].sum().reset_index().sort_values("new_cases",ascending=False).reset_index(drop =True)
df_country

df_country.columns=['Country','Total Cases','Total Deaths']
df_country=df_country.astype({"Country":str,"Total Cases": int , "Total Deaths": int})
df_country

fig = go.Figure(go.Bar(
    x= df_country['Total Cases'],
    y=df_country['Country'],
    marker_color='white',
    orientation="h"
))
fig.update_layout(
    title = 'Confirmed Cases CountryWise',
    template = 'plotly_dark',
    yaxis_title = 'Countries',
    xaxis_title = 'Confirmed Cases'
)
fig.show()

fig = go.Figure(go.Bar(
    x= df_country['Total Deaths'],
    y=df_country['Country'],
    marker_color='white',
    orientation="h"
))
fig.update_layout(
    title = 'Total Deaths CountryWise',
    template = 'plotly_dark',
    yaxis_title = 'Countries',
    xaxis_title = 'Total Deaths'
)
fig.show()

"""5. Mapping World Covid Data"""

fig = px.choropleth(df_country , locations = df_country['Country'],
                    color = df_country['Total Cases'],locationmode='country names',
                    hover_name = df_country['Country'],
                    color_continuous_scale = px.colors.sequential.OrRd,)
fig.update_layout(
    title = "Confirmed Cases over Countries"
)
fig.show()

"""Population Based Analysis"""

df_country_pm = df.groupby(["location"])[["new_cases_per_million","new_deaths_per_million"]].sum().reset_index().sort_values("new_cases_per_million",ascending=False).reset_index(drop =True)
df_country_pm.columns=['Country','Total Cases Per Million','Total Deaths Per Million']
df_country_pm=df_country_pm.astype({"Country":str,"Total Cases Per Million": int , "Total Deaths Per Million": int})
df_country_pm

fig = px.choropleth(df_country_pm , locations = df_country_pm['Country'],
                    color = df_country_pm['Total Cases Per Million'],locationmode='country names',
                    hover_name = df_country_pm['Country'],
                    color_continuous_scale = px.colors.sequential.OrRd,)
fig.update_layout(
    title = "Total Cases per Million"
)
fig.show()

fig = px.choropleth(df_country_pm , locations = df_country_pm['Country'],
                    color = df_country_pm['Total Deaths Per Million'],locationmode='country names',
                    hover_name = df_country_pm['Country'],
                    color_continuous_scale = px.colors.sequential.OrRd,)
fig.update_layout(
    title = "Total Deaths per Million"
)
fig.show()

fig = px.choropleth(df , locations = df['location'],
                    color = df['total_cases'],locationmode='country names',
                    hover_name = df['location'],
                    color_continuous_scale = px.colors.sequential.Inferno,template='plotly_dark',

                    animation_frame='date')
fig.update_layout(
    title = "Evolution of Covid Cases"
)
fig.show()

fig = px.choropleth(df , locations = df['location'],
                    color = df['total_deaths'],locationmode='country names',
                    hover_name = df['location'],
                    color_continuous_scale = px.colors.sequential.Inferno,
                    template='plotly_dark',
                    animation_frame='date')
fig.update_layout(
    title = "Covid deaths"
)
fig.show()

"""6. Regional Comparisons for Continent or Countries"""

df_country = df.groupby(["continent"])[["total_cases","total_deaths"]].sum().reset_index().sort_values("total_cases",ascending=False).reset_index(drop =True)
df_country.columns=['Country','Total Cases ','Total Deaths ']
df_country=df_country.astype({"Country":str,"Total Cases ": int , "Total Deaths ": int})
df_country

"""Comparing India vs Rest of the World"""

df_india = df[df["location"] =='India']
df_india.head()

url= " https://covid.ourworldindata.org/data/owid-covid-data.csv"
df_new = pd.read_csv(url)
df_new_world= df_new[df_new["location"] == 'World']
df_new_world.head()

fig = go.Figure()
fig.add_trace(go.Scatter(x = df_india['date'] , y =df_india['total_cases'],
                         mode = 'lines',
                         name = 'Confirmed Cases in India'))
fig.add_trace(go.Scatter(x=df_new_world['date'],y=df_new_world['total_cases'],
                         mode = 'lines',
                         name = 'Confirmed Cases in World'))
fig.update_layout(
    title="Evolution of Confirmed cases in India VS World",
    template='plotly_white'
)
fig.show()

"""India vs USA"""

df_usa = df[df["location"] =='United States']
df_usa.head()

fig = go.Figure()
fig.add_trace(go.Scatter(x = df_india['date'] , y =df_india['total_cases'],
                         mode = 'lines',
                         name = 'Confirmed Cases in India'))
fig.add_trace(go.Scatter(x=df_usa['date'],y=df_usa['total_cases'],
                         mode = 'lines',
                         name = 'Confirmed Cases in USA'))
fig.add_trace(go.Scatter(x=df_new_world['date'],y=df_new_world['total_cases'],
                         mode = 'lines',
                         name = 'Confirmed Cases in World'))
fig.update_layout(
    title="Evolution of Confirmed cases in India VS USA",
    template='plotly_white'
)
fig.show()

df_highest = df.sort_values('date').groupby('location').tail(1)
top10 = df_highest.sort_values(by='total_cases', ascending=False).head(10)
top10 = top10.sort_values(by='total_cases', ascending=True)

fig = go.Figure(go.Bar(
    x=top10['total_cases'],
    y=top10['location'],
    orientation='h',
    text=top10['total_cases'],
    textposition='auto',
    marker_color = 'indianred'
))

fig.update_layout(
    title='Top 10 Countries with Highest COVID-19 Cases',
    template='plotly_white',
    xaxis_title='Total Confirmed Cases',
    yaxis_title='Country'
)

fig.show()

"""7. Vaccination Analysis"""

#population vs people vaccinated in India
df_ind_vac = df[df['location'] == 'India']
latest_data = df_ind_vac.sort_values('date').iloc[-1]

population = latest_data['population']
people_vaccinated = latest_data['people_vaccinated']
people_fully_vaccinated = latest_data['people_fully_vaccinated']

# Compute unvaccinated
partially_vaccinated = people_vaccinated - people_fully_vaccinated
not_vaccinated = population - people_vaccinated

# Prepare data for plotly
data = pd.DataFrame({
    'Status': ['Fully Vaccinated', 'Partially Vaccinated', 'Not Vaccinated'],
    'Count': [people_fully_vaccinated, partially_vaccinated, not_vaccinated]
})

fig = px.pie(data, names='Status', values='Count',
             title='Vaccination Status in India ',
             color='Status',
             color_discrete_map={
                 'Fully Vaccinated': '#2E8B57',       # dark green
                 'Partially Vaccinated': '#66CDAA',   # medium aquamarine
                 'Not Vaccinated': '#B0E0E6'          # powder blue
             })

fig.update_traces(textinfo='percent+label', pull=[0.02, 0.02, 0])
fig.update_layout(showlegend=True, template='plotly_white')

fig.show()

"""Global View of Vaccination"""

latest_df = df.sort_values('date').groupby('location').last().reset_index()
fig = px.choropleth(latest_df, locations='location',
                    locationmode='country names',
                    color='people_fully_vaccinated_per_hundred',
                    color_continuous_scale='Viridis',
                    title='People Fully Vaccinated per 100 People ')
fig.show()

country_vax = df.groupby('location')[['people_vaccinated', 'population']].max().dropna()
country_vax['percent_vaccinated'] = (country_vax['people_vaccinated'] / country_vax['population']) * 100

top_10 = country_vax.sort_values('percent_vaccinated', ascending=False).head(10).reset_index()


import plotly.express as px
fig = px.bar(top_10, x='location', y='percent_vaccinated',
             title='Top 10 Countries by % of Population Vaccinated',
             color='percent_vaccinated', color_continuous_scale='Blues')
fig.update_layout(xaxis_title='Country', yaxis_title='% Vaccinated')
fig.show()

"""8. Estimating Covid Recoveries"""

df.drop (df[df.location == 'World'].index , inplace = True)
latest_df = df.sort_values('date').groupby('location').last().reset_index()

latest_df['estimated_recoveries'] = latest_df['total_cases'] - latest_df['total_deaths']
latest_df['estimated_recoveries'] = latest_df['estimated_recoveries'].clip(lower=0)

latest_df[['location','total_cases','total_deaths','estimated_recoveries']]

top_recovered = latest_df.sort_values('estimated_recoveries', ascending=False).head(10)
fig = px.bar(top_recovered,
             x='estimated_recoveries',
             y='location',
             orientation='h',
             color='estimated_recoveries',
             color_continuous_scale=[
                 '#a8e6cf',  # light mint
                 '#56c596',  # medium green
                 '#379683',  # teal green
                 '#05386b'   # navy blue
             ],
             title='Top 10 Countries by Estimated COVID-19 Recoveries')

fig.update_layout(
    xaxis_title='Estimated Recoveries',
    yaxis_title='Country',
    template='plotly_white'
)

fig.show()

# Create choropleth map
fig = px.choropleth(latest_df,
                    locations='location',
                    locationmode='country names',
                    color='estimated_recoveries',
                    color_continuous_scale='Tealgrn',
                    title='Estimated COVID-19 Recoveries Around the World')

fig.update_layout(geo=dict(showframe=False, showcoastlines=True))
fig.show()

"""Recoveries per million"""

latest_df['recoveries_per_million'] = (latest_df['estimated_recoveries'] / latest_df['population']) * 1_000_000

# Plot world map
fig = px.choropleth(latest_df,
                    locations='location',
                    locationmode='country names',
                    color='recoveries_per_million',
                    color_continuous_scale='Tealgrn',
                    title='Estimated COVID-19 Recoveries per Million People')

fig.update_layout(geo=dict(showframe=False, showcoastlines=True))
fig.show()

"""9. Case Fatality Rate of COVID

A country with millions of cases could still have low CFR if deaths were few.

A country with fewer cases but many deaths could have very high CFR (possibly due to poor healthcare, underreporting of cases, etc.)
"""

# Calculate CFR
latest_df['cfr'] = (latest_df['total_deaths'] / latest_df['total_cases']) * 100

# Top 10 CFR countries
top_cfr = latest_df.sort_values('cfr', ascending=False).head(10)

# Lollipop chart
fig = go.Figure()

# Lines
fig.add_trace(go.Scatter(
    x=top_cfr['cfr'],
    y=top_cfr['location'],
    mode='lines',
    line=dict(color='lightgray', width=2),
    showlegend=False
))

# Dots
fig.add_trace(go.Scatter(
    x=top_cfr['cfr'],
    y=top_cfr['location'],
    mode='markers+text',
    marker=dict(color='firebrick', size=12),
    text=top_cfr['cfr'].round(2).astype(str) + '%',
    textposition='middle right',
    name='CFR (%)'
))

fig.update_layout(
    title='🔼 Top 10 Countries by COVID-19 Case Fatality Rate (CFR)',
    xaxis_title='CFR (%)',
    yaxis_title='Country',
    template='plotly_white',
    height=500
)

fig.show()

"""10. Additional Features-(Vaccination rate , case_growth rate)"""

# Case growth rate
df['case_growth_rate'] = df['new_cases'] / df['total_cases']

#  Vaccination rate
df['vaccination_rate'] = df['people_fully_vaccinated'] / df['population']

# Replace inf, -inf with NaN and then fill NaNs with 0
cols = [ 'case_growth_rate', 'vaccination_rate']

for col in cols:
    df[col] = df[col].replace([np.inf, -np.inf], np.nan).fillna(0)

df_country_avg = df.groupby('location')[[
    'total_cases', 'new_cases', 'total_deaths',
     'case_growth_rate', 'vaccination_rate'
]].mean().reset_index()

df_country_avg.head(10)

df_india = df[df['location'] == 'India'].sort_values('date')

fig = go.Figure()

fig.add_trace(go.Scatter(x=df_india['date'], y=df_india['case_growth_rate'], name='Case Growth Rate'))
fig.add_trace(go.Scatter(x=df_india['date'], y=df_india['vaccination_rate'], name='Vaccination Rate'))


fig.update_layout(title='COVID-19 Rates in India Over Time',
                  xaxis_title='Date',
                  yaxis_title='Rate',
                  template='plotly_white')
fig.show()